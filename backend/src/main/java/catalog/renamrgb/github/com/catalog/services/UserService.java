package catalog.renamrgb.github.com.catalog.services;import catalog.renamrgb.github.com.catalog.dto.RoleDTO;import catalog.renamrgb.github.com.catalog.dto.UserDTO;import catalog.renamrgb.github.com.catalog.dto.UserInsertDTO;import catalog.renamrgb.github.com.catalog.entities.Role;import catalog.renamrgb.github.com.catalog.entities.User;import catalog.renamrgb.github.com.catalog.repositories.RoleRepository;import catalog.renamrgb.github.com.catalog.repositories.UserRepository;import catalog.renamrgb.github.com.catalog.services.exceptions.DatabaseException;import catalog.renamrgb.github.com.catalog.services.exceptions.ResourceNotFoundException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.dao.EmptyResultDataAccessException;import org.springframework.data.domain.Page;import org.springframework.data.domain.Pageable;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.security.core.userdetails.UsernameNotFoundException;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityNotFoundException;import java.util.Objects;import java.util.Optional;@Servicepublic class UserService implements UserDetailsService {    @Autowired    private UserRepository repository;    @Autowired    private RoleRepository roleRepository;    @Autowired    private BCryptPasswordEncoder passwordEncoder;    @Transactional(readOnly = true)    public Page<UserDTO> findAll(Pageable pageable) {        Page<User> listEntity = repository.findAll(pageable);        return listEntity                .map(UserDTO::new);    }    @Transactional(readOnly = true)    public UserDTO findById(Long id) {        Optional<User> obj = repository.findById(id);        User user = obj.orElseThrow(() -> new ResourceNotFoundException("User com id " + id + " n達o existe"));        return new UserDTO(user);    }    @Transactional    public UserDTO insert(UserInsertDTO dto) {        User user = new User();        copyDtoToEntity(dto, user);        user.setPassword(passwordEncoder.encode(dto.getPassword()));        user = repository.save(user);        return new UserDTO(user);    }    private void copyDtoToEntity(UserDTO dto, User user) {        user.setFirstName(dto.getFirstName());        user.setLastName(dto.getLastName());        user.setEmail(dto.getEmail());        user.getRoles().clear();        for (RoleDTO roleDto : dto.getRoles()) {            Role role = roleRepository.getOne(roleDto.getId());            user.getRoles().add(role);        }    }    @Transactional    public UserDTO update(Long id, UserDTO dto) {        try {            User user = repository.getOne(id);            copyDtoToEntity(dto, user);            user = repository.save(user);            return new UserDTO(user);        } catch (EntityNotFoundException e) {            throw new ResourceNotFoundException("Category com id " + id + " n達o existe");        }    }    public void delete(Long id) {        try {            repository.deleteById(id);        } catch (EmptyResultDataAccessException e) {            throw new ResourceNotFoundException("Category com id " + id + " n達o existe");        } catch (DataIntegrityViolationException e) {            throw new DatabaseException("Integridade do banco de dados violada");        }    }    @Override    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {        User user = repository.findByEmail(username);        if(Objects.nonNull(user)){            return user;        }         throw new UsernameNotFoundException("Email n達o existe");    }}